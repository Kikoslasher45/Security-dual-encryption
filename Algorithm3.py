#EL GAMAL cryptographic system

import random

# q is a big prime number
# alpha is a primitive root of q

q = 91719202992486316792078465993519408434032339342222
alpha = 69819097015282678217642953781901782108622348206415

k=18855005497277304688037452390510251212637518573595
# User A generates a random number and sends it to user B   
Xa, Ya = 7,21386208373263032835037461847868910253647660111927

# def Euclid(a,  b):
#     if (b == 0):
#         return a
#     # print(a,b)
#     return Euclid(b, a % b)


# def userA(q, alpha):
#     # q is a big prime number
#     # alpha is a primitive root of q
#     # User A
#     # User A generates a random number and sends it to user B
#     # User A generates a random number and sends it to user B
#     Xa = random.randint(1, q)
#     Xa = 5
#     # print("User A sends a random number to user B: ", a)
#     Ya = (alpha**Xa) % q
#     print("user A computes Ya: ", Ya, " and Xa: ", Xa)
#     return Xa, Ya


def Encryption(Ya, M):
    # User B
    if M < 0 or M > q:
        print("Message is not in range")
        return
    # User B generates a random number and sends it to user A
    # k = random.randint(1, q)
    k = 6
    K = Ya**k % q
    print("User B computes K: ", K, "and k: ", k)
    C1 = alpha**k % q
    C2 = M*K % q
    print("User B computes C1: ", C1, "and C2: ", C2)
    # print("User B sends a random number to user A: ", b)
    # User B encrypts the message using the random number
    # generated by user A and sends it to user A
    return C1, C2


def Decryption(C1, C2):
    # User A
    # User A decrypts the message using the random number
    # generated by user B and sends it to user B
    # convert C1 and C2 to int
    C1 = int(C1)
    C2 = int(C2)
    print("C1: ", C1, "C2: ", C2)
    K = C1**Xa % q
    print("User A computes K: ", K)
    # K_inverse=pow(K,-1, 1/q);
    for i in reversed(range(1,q)):
        if((K*i)%q==1):
            K_inverse=i
            break
    
    print("user A computes K_inverse: ", K_inverse)
    M = C2*K_inverse % q
    print("User A decrypts the message: ", M)
    return M

def splitCipherToList(C2,length):
    C2List=[]
    for i in range(0,len(C2),length):
        C2List.append(C2[i:i+length])
    return C2List

def main():

    M = 40
    # User B generates a random number and sends it to user A
    print("check")
    # C1, C2 = Encryption(Ya, M)
    print("double check")
    # User A decrypts the message
    C1="55383300390110251529312796840494450482101100605455"

    # C2="352006758597978007407416583061487577608742522236888421269895254851196550437022630172747184527413793843577051953284061826728483444932987720779297023939383505140457985309514846464653945499870090010057114623546595705135630160332474599448633705839604535022553515525530602743066918467968119804522603218876426333694263650075170707123492722843914334702292596296818620476467866288687638500010754950938735286179542433"
    # print(len(str(q)))
    # # C2List=splitCipherToList(C2,len(str(q)))

    # print(C2List)
    

    C2=['352006758597978007407416583061487577608742522236888',
         '421269895254851196550437022630172747184527413793843',
         '577051953284061826728483444932987720779297023939383', 
         '505140457985309514846464653945499870090010057114623', 
         '546595705135630160332474599448633705839604535022553', 
         '515525530602743066918467968119804522603218876426333', 
         '694263650075170707123492722843914334702292596296818', 
         '620476467866288687638500010754950938735286179542433']
    M=""
    for i in C2:
        # if(int(i)<0 or int(i)>q):
        #     print("Message is not in range")
        #     print(i)
            # return
        M+=str(Decryption(C1,i))
    # M = Decryption(C1, C2)
    print("The decrypted message is: ", M)
    # print(5*11%19)


if __name__ == "__main__":
    main()
